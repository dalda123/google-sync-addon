// SPDX-FileCopyrightText: (c) 2016 ale5000
// SPDX-License-Identifier: GPL-3.0-or-later
// SPDX-FileType: SOURCE

plugins {
    id 'base'
    //id 'com.github.hierynomus.license-report' version '0.15.0'
    //id 'com.github.spotbugs' version '4.7.6'
}

gradleEnterprise.buildScan {
    termsOfServiceUrl 'https://gradle.com/terms-of-service'
    termsOfServiceAgree 'yes'
    publishAlwaysIf System.getenv('UPLOAD_BUILD_SCAN') != null
}

void configure() {
    defaultTasks 'tasks'

    Properties props = new Properties()
    file('zip-content/module.prop').withInputStream { props.load(it) }

    description = props.getProperty('description')
    version = props.getProperty('version').trim()
    archivesBaseName = props.getProperty('id')
    //ext.isBeta = version.endsWith('-beta')
    //ext.isAlpha = version.endsWith('-alpha')
    //ext.isSnapshot = version.endsWith('-snapshot')
    rootProject.buildDir = "${projectDir}/output"

    println 'Version: ' + version
    println 'OS: ' + System.properties['os.name']
}
configure()

tasks.register('cleanCache', Delete) {
    delete "${projectDir}/cache"
}

tasks.register('cleanRecoveryOutput', Delete) {
    delete "${projectDir}/recovery-simulator/output"
}

tasks.named('clean').configure {
    finalizedBy tasks.named('cleanRecoveryOutput')
    finalizedBy tasks.named('cleanCache')
}

static String getScriptExt() {
    if(System.properties['os.name'].toLowerCase(Locale.ROOT).contains('windows')) {
        return '.bat'
    } else {
        return '.sh'
    }
}

tasks.register('buildOta', Exec) {
    group '- OTA build'
    description 'Build the flashable OTA zip.'

    doFirst {
        println 'Building the flashable OTA zip with Gradle...'
        executable "${projectDir}/build" + getScriptExt()
    }
}

tasks.register('buildOtaOSS', Exec) {
    group '- OTA build'
    description 'Build the flashable OTA zip (open-source components only).'

    doFirst {
        println 'Building the flashable OTA zip (open-source components only) with Gradle...'
        executable "${projectDir}/build" + getScriptExt()
        environment OPENSOURCE_ONLY: 'true'
    }
}
tasks.named('build').configure {
    finalizedBy buildOtaOSS
}

tasks.register('installTest', Exec) {
    group 'verification'

    doFirst {
        executable "${projectDir}/recovery-simulator/recovery" + getScriptExt()
        args "${projectDir}/output/*.zip"
    }
}

tasks.register('test') {
    dependsOn installTest
}

// Dummy task
tasks.register('install')

tasks.named('wrapper').configure {
    gradleVersion '7.3.3'
    distributionType Wrapper.DistributionType.ALL
    distributionSha256Sum 'c9490e938b221daf0094982288e4038deed954a3f12fb54cbf270ddf4e37d879'
}
